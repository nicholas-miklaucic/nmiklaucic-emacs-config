;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"This file uses Burkhard-Keller trees to efficiently compute approximate string matches from a
dictionary.\"\"\"" code nil nil [1 112])
            ("numpy" include nil nil [115 133])
            ("BKTree" type
               (:documentation "A Burkhard-Keller tree."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Given a list of words, forms a BK Tree. Wordlist cannot be empty.\"\"\"" code nil (reparse-symbol indented_block_body) [226 297])
                            ("if" code nil (reparse-symbol indented_block_body) [306 383])
                            ("self" variable nil (reparse-symbol indented_block_body) [391 420])
                            ("for" code nil (reparse-symbol indented_block_body) [429 478]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [201 205])
                            ("wordlist" variable nil (reparse-symbol function_parameters) [207 215]))                          
                        :documentation "Given a list of words, forms a BK Tree. Wordlist cannot be empty."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [188 478])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [491 495])
                            ("word" variable nil (reparse-symbol function_parameters) [497 501]))                          
                        :documentation "Adds a word to the BK-tree.")
                        (reparse-symbol indented_block_body) [483 1127])
                    ("query" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1143 1147])
                            ("target" variable nil (reparse-symbol function_parameters) [1149 1155])
                            ("n" variable nil (reparse-symbol function_parameters) [1157 1158]))                          
                        :documentation "Target is the string to fuzzy-match. n is the desired maximum distance to vary. Returns a
        list, sorted by closest-first but besides that unordered, of the words that fit the
        criteria.")
                        (reparse-symbol indented_block_body) [1133 2201])
                    ("save_words" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2222 2226])
                            ("filename" variable nil (reparse-symbol function_parameters) [2228 2236]))                          
                        :documentation "Saves the BK-Tree's words in a list to a file. DOES NOT save the tree's exact structure,
        just the words it has in it.")
                        (reparse-symbol indented_block_body) [2207 2705])
                    ("read_words_from_file" function
                       (:documentation "Reads in a newline-separated list of words and creates a BK-tree."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2752 2755])
                            ("filename" variable nil (reparse-symbol function_parameters) [2757 2765]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2710 2978])
                    ("levenshtein" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("source" variable nil (reparse-symbol function_parameters) [3261 3267])
                            ("target" variable nil (reparse-symbol function_parameters) [3269 3275]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2983 4643]))                  
                :type "class")
                nil [136 4643]))          
      :file "bk_tree.py"
      :pointmax 4643
      :fsize 4642
      :lastmodtime '(23004 10454 58953 578000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Given a sentence, return a spell-checked version, with the desired corpus of words sorted by
frequency.\"\"\"" code nil nil [1 110])
            ("csv" include nil nil [112 122])
            ("re" include nil nil [123 132])
            ("numpy" include nil nil [134 152])
            ("pandas" include nil nil [153 172])
            ("tqdm" include nil nil [173 194])
            ("bk_tree" include nil nil [196 222])
            ("corpus_reader" include nil nil [223 270])
            ("tree" variable nil nil [272 304])
            ("REGEX_REPLACEMENTS" variable nil nil [307 472])
            ("PRECISION" variable nil nil [632 645])
            ("correct" function
               (:documentation "Returns the closest words in the list of words we have, sorted by likelihood. If the word
    itself is capitalized, capitalizes the return words."
                :arguments 
                  ( ("input_word" variable nil (reparse-symbol function_parameters) [723 733]))                  )
                nil [711 1646])
            ("sentence_correct" function
               (:documentation "Returns a new corrected sentence, being sensitive to punctuation."
                :arguments 
                  ( ("input_sentence" variable nil (reparse-symbol function_parameters) [1669 1683]))                  )
                nil [1648 4002]))          
      :file "spellcheck.py"
      :pointmax 4002
      :fsize 4007
      :lastmodtime '(23086 25222 869871 33000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Processes the name list into a text file format.\"\"\"" code nil nil [1 55])
            ("with" code nil nil [57 318]))          
      :file "name_list_processor.py"
      :pointmax 318
      :fsize 317
      :lastmodtime '(22997 36373 642702 556000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Creates a corpus of spell-checked words, with names, an English wordlist, and prior Peabody
notecards.\"\"\"" code nil nil [1 109])
            ("collections" include nil nil [112 143])
            ("string" include nil nil [144 190])
            ("numpy" include nil nil [192 210])
            ("pandas" include nil nil [211 230])
            ("process" function
               (:documentation "Lowercases and cuts out punctuation."
                :arguments 
                  ( ("word" variable nil (reparse-symbol function_parameters) [245 249]))                  )
                nil [233 362])
            ("pbody_corpus" variable nil nil [364 434])
            ("descs" variable nil nil [435 466])
            ("processed_descs" variable nil nil [467 539])
            ("processed_descs" variable nil nil [592 671])
            ("processed_descs" variable nil nil [672 733])
            ("processed_names" variable nil nil [734 754])
            ("with" code nil nil [755 1223])
            ("processed_words" variable nil nil [1223 1243])
            ("with" code nil nil [1244 1442])
            ("corpus" variable nil nil [1443 1569])
            ("save_corpus" function
               (:documentation "Saves a Counter to a CSV in key,value form."
                :arguments 
                  ( ("corpus" variable nil (reparse-symbol function_parameters) [1588 1594])
                    ("outfile" variable nil (reparse-symbol function_parameters) [1596 1603]))                  )
                nil [1572 1784])
            ("save_corpus" code nil nil [1785 1818]))          
      :file "corpus_creator.py"
      :pointmax 1819
      :fsize 1818
      :lastmodtime '(23086 22591 315398 355000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"This reads in corpus.dat as a Counter.\"\"\"" code nil nil [1 45])
            ("collections" include nil nil [47 78])
            ("read_corpus" function
               (:documentation "Gets a Counter from a CSV in key,value form."
                :arguments 
                  ( ("infile" variable nil (reparse-symbol function_parameters) [97 103]))                  )
                nil [81 339])
            ("corpus" variable nil nil [341 375]))          
      :file "corpus_reader.py"
      :pointmax 376
      :fsize 375
      :lastmodtime '(23077 55184 111661 13000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Spellchecks a column in a CSV and adds it as a different column.\"\"\"" code nil nil [1 71])
            ("pandas" include nil nil [72 91])
            ("spellcheck" include nil nil [93 132])
            ("df" variable nil nil [134 203])
            ("df" code nil nil [204 231])
            ("df" variable nil nil [232 284])
            ("df" code nil nil [285 354]))          
      :file "correct_csv.py"
      :pointmax 355
      :fsize 354
      :lastmodtime '(23086 30112 345274 151000)
      :unmatched-syntax '((NAME 232 . 234) ($EOI 285 . 285))))
  :file "!home!nicholas!programs!Peabody-Notecards!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
