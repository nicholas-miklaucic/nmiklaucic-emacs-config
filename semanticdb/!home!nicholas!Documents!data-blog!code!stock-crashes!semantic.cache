;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"This file reads in the DJIA, performs basic cleanup, and then makes the time series available as
a DataFrame. Caches a version in a file for easier reading that updates daily.\"\"\"" code nil nil [1 182])
            ("time" include nil nil [185 196])
            ("pathlib" include nil nil [197 221])
            ("numpy" include nil nil [223 241])
            ("pandas" include nil nil [242 261])
            ("quandl" include nil nil [262 275])
            ("get_stock_data" function
               (:documentation "Gets the log-price of the good as a time series, where quandl_name is the Quandl identifier for
    the dataset and cachepath is the Path object that represents a cache file.  Col represents the
    desired column to use: if None, simply gets the first one.  Force_reload, if True, will get the
    data from the Internet even if the cache is up to date.
    "
                :arguments 
                  ( ("quandl_name" variable nil (reparse-symbol function_parameters) [297 308])
                    ("cachepath" variable nil (reparse-symbol function_parameters) [310 319])
                    ("col" variable nil (reparse-symbol function_parameters) [321 324])
                    ("force_reload" variable nil (reparse-symbol function_parameters) [331 343]))                  )
                nil [278 1448])
            ("djia" variable nil nil [1450 1511])
            ("rhod" variable nil nil [1512 1596])
            ("csco" variable nil nil [1597 1668]))          
      :file "get_stock_data.py"
      :pointmax 1669
      :fsize 1668
      :lastmodtime '(22720 26069 59795 322000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"This file has some useful code for working with time series, like being able to plot a model with
the data it's looking at.

\"\"\"" code nil nil [1 132])
            ("numpy" include nil nil [135 153])
            ("matplotlib.pyplot" include nil nil [154 185])
            ("plot_data" function
               (:documentation "Ax can be a subplot if desired. Plots the data using some sensible defaults.

    Styles can be a list of matplotlib styles to use.
    "
                :arguments 
                  ( ("dataset" variable nil (reparse-symbol function_parameters) [202 209])
                    ("ax" variable nil (reparse-symbol function_parameters) [211 213])
                    ("styles" variable nil (reparse-symbol function_parameters) [220 226]))                  )
                nil [188 628])
            ("plot_model" function
               (:documentation "Modelfunc maps the integers 0-n -> some values. Dataset is a time series. If ax is provided, the
    function will draw on that instead. Any styles (as a list) get passed to the central plot()
    call. Kwargs get passed too.

    "
                :arguments 
                  ( ("modelfunc" variable nil (reparse-symbol function_parameters) [649 658])
                    ("dataset" variable nil (reparse-symbol function_parameters) [660 667])
                    ("ax" variable nil (reparse-symbol function_parameters) [669 671])
                    ("styles" variable nil (reparse-symbol function_parameters) [678 684])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [691 699]))                  )
                nil [634 1452]))          
      :file "conveniences.py"
      :pointmax 1452
      :fsize 1451
      :lastmodtime '(22672 49564 492464 616000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"This file provides functions that are useful for several different methods of fitting the LPPL
function, including a simple transformation that allows reduction from 7 nonlinear parameters to 4
and a common error function.\"\"\"" code nil nil [1 229])
            ("functools" include nil nil [231 260])
            ("numpy" include nil nil [262 280])
            ("sklearn.linear_model" include nil nil [281 330])
            ("m_bounds" variable nil nil [612 633])
            ("omega_bounds" variable nil nil [674 696])
            ("phi_bounds" variable nil nil [729 756])
            ("bounds" variable nil nil [757 832])
            ("model_mse" function
               (:documentation "Takes a function that maps the integers 0..n-1 to values and data with n entries and does
    mean squared error."
                :arguments 
                  ( ("modelfunc" variable nil (reparse-symbol function_parameters) [910 919])
                    ("data" variable nil (reparse-symbol function_parameters) [921 925]))                  )
                nil [896 1157])
            ("lppl" function
               (:documentation "Returns the monster expression
    A + B(t_c-t)^m + C(t_c-t)^m * cos(omega * log (t_c - t) - phi)

    If t_c <= t, raises ValueError.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1168 1169])
                    ("b" variable nil (reparse-symbol function_parameters) [1171 1172])
                    ("c" variable nil (reparse-symbol function_parameters) [1174 1175])
                    ("m" variable nil (reparse-symbol function_parameters) [1177 1178])
                    ("omega" variable nil (reparse-symbol function_parameters) [1180 1185])
                    ("phi" variable nil (reparse-symbol function_parameters) [1187 1190])
                    ("t_c" variable nil (reparse-symbol function_parameters) [1192 1195])
                    ("t" variable nil (reparse-symbol function_parameters) [1197 1198]))                  )
                nil [1159 1561])
            ("get_lppl_func" function
               (:documentation "Returns a function that takes in a parameter t and returns the full LPPL."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1581 1582])
                    ("b" variable nil (reparse-symbol function_parameters) [1584 1585])
                    ("c" variable nil (reparse-symbol function_parameters) [1587 1588])
                    ("m" variable nil (reparse-symbol function_parameters) [1590 1591])
                    ("omega" variable nil (reparse-symbol function_parameters) [1593 1598])
                    ("phi" variable nil (reparse-symbol function_parameters) [1600 1603])
                    ("t_c" variable nil (reparse-symbol function_parameters) [1605 1608]))                  )
                nil [1563 1749])
            ("reformulated_slaved_lppl" function
               (:documentation "Uses a reformulated version of the LPPL that has four linear parameters. Returns a new
    function that takes in an input t (0 <= t < t_c) and evaluates at that number."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1780 1781])
                    ("b" variable nil (reparse-symbol function_parameters) [1783 1784])
                    ("c1" variable nil (reparse-symbol function_parameters) [1786 1788])
                    ("c2" variable nil (reparse-symbol function_parameters) [1790 1792])
                    ("m" variable nil (reparse-symbol function_parameters) [1794 1795])
                    ("omega" variable nil (reparse-symbol function_parameters) [1797 1802])
                    ("t_c" variable nil (reparse-symbol function_parameters) [1804 1807]))                  )
                nil [1751 2291])
            ("optimal_nonlinear_lppl" function
               (:documentation "Given the three nonlinear parameters, uses linear regression to globally solve for the four
    slaved linear variables and returns a tuple with the optimal LPPL function and its MSE. Data is
    the time series to fit to. Returns a function that maps the integers 0..n-1 to a model of the
    n-length input dataset.
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [2320 2324])
                    ("m" variable nil (reparse-symbol function_parameters) [2326 2327])
                    ("omega" variable nil (reparse-symbol function_parameters) [2329 2334])
                    ("t_c" variable nil (reparse-symbol function_parameters) [2336 2339]))                  )
                nil [2293 3370])
            ("naive_nonlinear_lppl" function
               (:documentation "Uses the naive (comparatively) LPPL function to generate a less tractable LPPL."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [3397 3401])
                    ("m" variable nil (reparse-symbol function_parameters) [3403 3404])
                    ("omega" variable nil (reparse-symbol function_parameters) [3406 3411])
                    ("phi" variable nil (reparse-symbol function_parameters) [3413 3416])
                    ("t_c" variable nil (reparse-symbol function_parameters) [3418 3421]))                  )
                nil [3372 4136]))          
      :file "general_fit_funcs.py"
      :pointmax 4136
      :fsize 4137
      :lastmodtime '(22720 31878 708750 23000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"This file creates several 3D plots of the LPPL cost function to illustrate its nonlinearity.\"\"\"" code nil nil [1 99])
            ("matplotlib.pyplot" include nil nil [101 132])
            ("numpy" include nil nil [133 151])
            ("mpl_toolkits.mplot3d" include nil nil [152 191])
            ("general_fit_funcs" include nil nil [193 256])
            ("get_stock_data" include nil nil [257 288])
            ("N_TICKS" variable nil nil [290 302])
            ("test_data" variable nil nil [304 347])
            ("fig" variable nil nil [349 367])
            ("ax_m" variable nil nil [368 429])
            ("omegas_1" variable nil nil [432 470])
            ("t_cs1" variable nil nil [471 549])
            ("error1" variable nil nil [551 651])
            ("mesh1" variable nil nil [653 704])
            ("x1, y1" code nil nil [705 719])
            ("z1" variable nil nil [720 727])
            ("for" code nil nil [728 848])
            ("z1" variable nil nil [849 866])
            ("ax_m" code nil nil [867 939])
            ("ax_omega" variable nil nil [941 1009])
            ("ms_1" variable nil nil [1012 1049])
            ("t_cs2" variable nil nil [1050 1128])
            ("error2" variable nil nil [1130 1221])
            ("mesh2" variable nil nil [1223 1270])
            ("x2, y2" code nil nil [1271 1285])
            ("z2" variable nil nil [1286 1293])
            ("for" code nil nil [1294 1414])
            ("z2" variable nil nil [1415 1432])
            ("ax_omega" code nil nil [1433 1509])
            ("ax_tc" variable nil nil [1511 1576])
            ("ms_2" variable nil nil [1578 1615])
            ("omegas_2" variable nil nil [1616 1654])
            ("error3" variable nil nil [1656 1753])
            ("mesh3" variable nil nil [1755 1805])
            ("x3, y3" code nil nil [1806 1820])
            ("z3" variable nil nil [1821 1828])
            ("for" code nil nil [1829 1949])
            ("z3" variable nil nil [1950 1967])
            ("ax_tc" code nil nil [1968 2041]))          
      :file "plot_lppl_cost.py"
      :pointmax 2042
      :fsize 2041
      :lastmodtime '(22673 30771 439044 981000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Tries to model a 4D function using color as the last dimension.\"\"\"" code nil nil [1 70])
            ("matplotlib.pyplot" include nil nil [73 104])
            ("numpy" include nil nil [105 123])
            ("seaborn" include nil nil [124 145])
            ("mpl_toolkits.mplot3d" include nil nil [146 185])
            ("general_fit_funcs" include nil nil [187 250])
            ("get_stock_data" include nil nil [251 282])
            ("test_data" variable nil nil [284 328])
            ("N_TICKS" variable nil nil [331 342])
            ("get_cost" function
               (:documentation "The function we're plotting"
                :arguments 
                  ( ("params" variable nil (reparse-symbol function_parameters) [358 364]))                  )
                nil [345 481])
            ("ms" variable nil nil [483 518])
            ("t_cs" variable nil nil [556 629])
            ("points" variable nil nil [631 642])
            ("for" code nil nil [643 759])
            ("points" variable nil nil [760 785])
            ("colors" variable nil nil [786 835])
            ("fig" variable nil nil [837 855])
            ("ax" variable nil nil [856 926])
            ("p" variable nil nil [927 989])
            ("plt" code nil nil [990 1005])
            ("plt" code nil nil [1007 1017]))          
      :file "plot_lppl_cost_color.py"
      :pointmax 1018
      :fsize 1017
      :lastmodtime '(22674 23378 814747 265000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [31 119])
            ("get_stock_data" include nil nil [120 151])
            ("plot_higher_d_functions" include nil nil [152 204])
            ("test_data" variable nil nil [206 249])
            ("plot_func_jagged" function (:arguments 
              ( ("params" variable nil (reparse-symbol function_parameters) [273 280]))              ) nil [252 357])
            ("plot_func_smoother" function (:arguments 
              ( ("params" variable nil (reparse-symbol function_parameters) [382 389]))              ) nil [359 468])
            ("m_bounds" variable nil nil [470 491])
            ("omega_bounds" variable nil nil [492 514])
            ("tc_bounds" variable nil nil [515 577])
            ("phi_bounds" variable nil nil [578 607])
            ("plot_3d_subplots" code nil nil [731 884]))          
      :file "test_higher_dim_plots.py"
      :pointmax 885
      :fsize 884
      :lastmodtime '(22676 6635 459047 151000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"This file provides all the utilty functions of the LPPL model. Actual fitting is left to other
code.\"\"\"" code nil nil [1 107])
            ("functools" include nil nil [109 138])
            ("math" include nil nil [139 164])
            ("lppl" function
               (:documentation "Returns the monster expression
    
    A + B(t_c-t)^m + C(t_c-t)^m * cos(omega * log (t_c - t) - phi)

    If t_c <= t, returns ValueError.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [176 177])
                    ("b" variable nil (reparse-symbol function_parameters) [179 180])
                    ("c" variable nil (reparse-symbol function_parameters) [182 183])
                    ("t_c" variable nil (reparse-symbol function_parameters) [185 188])
                    ("omega" variable nil (reparse-symbol function_parameters) [190 195])
                    ("phi" variable nil (reparse-symbol function_parameters) [197 200])
                    ("m" variable nil (reparse-symbol function_parameters) [202 203])
                    ("t" variable nil (reparse-symbol function_parameters) [205 206]))                  )
                nil [167 571])
            ("get_lppl_func" function
               (:documentation "Returns a function that takes in a parameter t and returns the full LPPL."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [591 592])
                    ("b" variable nil (reparse-symbol function_parameters) [594 595])
                    ("c" variable nil (reparse-symbol function_parameters) [597 598])
                    ("t_c" variable nil (reparse-symbol function_parameters) [600 603])
                    ("omega" variable nil (reparse-symbol function_parameters) [605 610])
                    ("phi" variable nil (reparse-symbol function_parameters) [612 615])
                    ("m" variable nil (reparse-symbol function_parameters) [617 618]))                  )
                nil [573 759]))          
      :file "lppl_model.py"
      :pointmax 759
      :fsize 758
      :lastmodtime '(22673 21695 780652 980000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "derivatives_of_lppl.py"
      :pointmax 1669
      :fsize 1669
      :lastmodtime '(22683 31791 267373 148000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Fits the LPPL with naive least-squares methods without any preprocessing or optimization.\"\"\"" code nil nil [1 96])
            ("numpy" include nil nil [99 117])
            ("scipy.optimize" include nil nil [118 139])
            ("general_fit_funcs" include nil nil [141 184])
            ("test_model_fitting" include nil nil [185 224])
            ("numpy_lppl" function
               (:documentation "Vectorized version of LPPL"
                :arguments 
                  ( ("t" variable nil (reparse-symbol function_parameters) [884 885])
                    ("a" variable nil (reparse-symbol function_parameters) [887 888])
                    ("b" variable nil (reparse-symbol function_parameters) [890 891])
                    ("c" variable nil (reparse-symbol function_parameters) [893 894])
                    ("m" variable nil (reparse-symbol function_parameters) [896 897])
                    ("omega" variable nil (reparse-symbol function_parameters) [899 904])
                    ("phi" variable nil (reparse-symbol function_parameters) [906 909])
                    ("t_c" variable nil (reparse-symbol function_parameters) [911 914]))                  )
                nil [869 1061])
            ("fit_basic_LPPL" function
               (:documentation "Given a vector y taken to be the values at each point t=0, t=1, etc., fits an LPPL function
    to that dataset and returns the optimal parameters (in a numpy array [A, B, C, m, omega, phi,
    t_c]). No slaving or other processing
    is done, just straight curve-fitting."
                :arguments 
                  ( ("y" variable nil (reparse-symbol function_parameters) [1082 1083]))                  )
                nil [1063 1753])
            ("basic_LPPL_model" function
               (:documentation "Given a vector y, returns a function that maps the indices of y to the projected model."
                :arguments 
                  ( ("y" variable nil (reparse-symbol function_parameters) [1776 1777]))                  )
                nil [1755 1923])
            ("test_all" code nil nil [1924 1950]))          
      :file "fit_basic_lppl.py"
      :pointmax 1951
      :fsize 1951
      :lastmodtime '(22720 31796 133315 914000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "plot_higher_d_functions.py"
      :fsize 2243
      :lastmodtime '(22676 6616 462958 413000))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Simple file that tests a model fitting function (input data -> function) on three sample
datasets.\"\"\"" code nil nil [1 105])
            ("conveniences" include nil nil [107 142])
            ("general_fit_funcs" include nil nil [143 182])
            ("get_stock_data" include nil nil [183 226])
            ("test_great_depression" function
               (:documentation "Tests for the bubble prior to the Great Depression"
                :arguments 
                  ( ("model" variable nil (reparse-symbol function_parameters) [255 260]))                  )
                nil [229 552])
            ("test_rhodium" function
               (:documentation "Tests for the bubble prior to the rhodium crash of 2008."
                :arguments 
                  ( ("model" variable nil (reparse-symbol function_parameters) [571 576]))                  )
                nil [554 833])
            ("test_cisco_dotcom" function
               (:documentation "Tests for the dot-com bubble prior to the crash of the stock price of Cisco, Inc. (2000)."
                :arguments 
                  ( ("model" variable nil (reparse-symbol function_parameters) [857 862]))                  )
                nil [835 1162])
            ("test_all" function
               (:documentation "Tests each one in series."
                :arguments 
                  ( ("model" variable nil (reparse-symbol function_parameters) [1177 1182]))                  )
                nil [1164 1307]))          
      :file "test_model_fitting.py"
      :pointmax 1307
      :fsize 1306
      :lastmodtime '(22720 31950 246126 103000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"This file implements a basic genetic algorithm to fit an LPPL function.
It uses the slaved form first, and then uses a genetic algorithm to fit the remaining values. What
this entails is creating an initial population randomly, selecting the best model or models, and
then \"mutating\" to generate new random values slightly closer to the original than the previous
iteration. This continues until convergence. Once the genetic algorithm has reached roughly the
right area, it uses generic gradient descent to rapidly converge on the most optimal local value.\"\"\"" code nil nil [1 564])
            ("random" include nil nil [567 592])
            ("tqdm" include nil nil [594 615])
            ("general_fit_funcs" include nil nil [617 679])
            ("test_model_fitting" include nil nil [680 719])
            ("is_within" function
               (:documentation "Returns True if every parameter in model1 is contained in the bounds."
                :arguments 
                  ( ("model" variable nil (reparse-symbol function_parameters) [736 741])
                    ("bounds" variable nil (reparse-symbol function_parameters) [743 749]))                  )
                nil [722 1003])
            ("mutate" function
               (:documentation "Returns a new randomly-mutated model with deviations in the inputs. Throws out models that
    would not meet the bounds."
                :arguments 
                  ( ("model" variable nil (reparse-symbol function_parameters) [1016 1021])
                    ("strength" variable nil (reparse-symbol function_parameters) [1023 1031])
                    ("bounds" variable nil (reparse-symbol function_parameters) [1033 1039]))                  )
                nil [1005 1525])
            ("genetic_only_model" function
               (:documentation "Attempts to fit a model using a genetic algorithm. N_iterations is self-explanatory. Each
    iteration consists of taking n_chosen of the population from the current set, generating random
    mutations of each, and replenishing the set of values to keep the number of models constant. The
    default is to start with 10 models and 2 chosen, so each chosen has five mutations.
    Mutation_strength controls how \"jumpy\" the mutations are, as a ratio of the values
    themselves: the default, at max, allows for 10% deviation from the original. Returns the model
    data as a list [A, B, C, m, omega, phi, t_c].

    "
                :arguments 
                  ( ("inputdata" variable nil (reparse-symbol function_parameters) [1550 1559])
                    ("n_iterations" variable nil (reparse-symbol function_parameters) [1561 1573])
                    ("n_initial" variable nil (reparse-symbol function_parameters) [1578 1587])
                    ("n_chosen" variable nil (reparse-symbol function_parameters) [1592 1600])
                    ("mutation_strength" variable nil (reparse-symbol function_parameters) [1604 1621]))                  )
                nil [1527 3209])
            ("test_all" code nil nil [3211 3239]))          
      :file "genetic_algorithm_fit.py"
      :pointmax 3240
      :fsize 3239
      :lastmodtime '(22720 28197 738450 181000)
      :unmatched-syntax nil))
  :file "!home!nicholas!Documents!data-blog!code!stock-crashes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
